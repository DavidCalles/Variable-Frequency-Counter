// FreqDivider.v

--***********************************************************************
--	Description: 
--	
--	Inputs: 		
--					
--	Outputs: 	
--***********************************************************************

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.all;

-- Entity declaration

ENTITY FreqDivider IS

	PORT (
		clk 		: IN STD_LOGIC;
		reset		: IN STD_LOGIC;
		factor	: IN STD_LOGIC_VECTOR(9 downto 0);
		clk_out	: OUT STD_LOGIC
	);

END FreqDivider;

-- Architecture definition

ARCHITECTURE Behavioral OF FreqDivider IS
	

	--------------------------------------------------------------------------
	------------------------- INTERMEDIATE SIGNALS ---------------------------
	--------------------------------------------------------------------------

	SIGNAL countSignal 	: STD_LOGIC_VECTOR(31 DOWNTO 0);
	SIGNAL clkOutSignal	: STD_LOGIC := '0';

	SIGNAL clkFactorSignal: STD_LOGIC_VECTOR(31 DOWNTO 0);

BEGIN

	--------------------------------------------------------------------------
	-------------------------- COMPONENTS MAPPING ----------------------------
	--------------------------------------------------------------------------	
	clkFactorSignal(31 downto 28) <= (others => '0');
	clkFactorSignal(27 downto 18) <= factor;
	clkFactorSignal(17 downto 0) <= (others => '0');
	
	process (clk)
	begin
	
		if rising_edge(clk) then
		
			if (reset = '0') then 
				countSignal <= x"00000000";
				
			else
			
				if (countSignal < clkFactorSignal) then 
					countSignal <= countSignal + x"00000001";
				else
					countSignal <= x"00000000";
					clkOutSignal <= not clkOutSignal;
					
				end if;
				
			end if;
			
		end if;
	
	end process;
	
	-- outputs
	clk_out <= clkOutSignal;


END;